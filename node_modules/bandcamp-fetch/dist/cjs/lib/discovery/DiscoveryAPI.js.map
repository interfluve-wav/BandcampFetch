{"version":3,"file":"DiscoveryAPI.js","sourceRoot":"","sources":["../../../../src/lib/discovery/DiscoveryAPI.ts"],"names":[],"mappings":"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","sourcesContent":["import BaseAPIWithImageSupport, { BaseAPIWithImageSupportParams } from '../common/BaseAPIWithImageSupport.js';\nimport { DiscoverOptions, DiscoverParams, DiscoverResult } from '../types/Discovery.js';\nimport { CacheDataType } from '../utils/Cache.js';\nimport { URLS } from '../utils/Constants.js';\nimport { FetchMethod } from '../utils/Fetcher.js';\nimport Limiter from '../utils/Limiter.js';\nimport NameValuePair from '../utils/NameValuePair.js';\nimport DiscoverOptionsParser from './DiscoverOptionsParser.js';\nimport DiscoverResultParser from './DiscoverResultParser.js';\n\ninterface DiscoverRequestPayload {\n  s: string; // SortyBy\n  p: number; // Page\n  g?: string; // Genre\n  t?: string; // Subgenre\n  gn?: string; // Location\n  f?: string; // Format\n  r?: string; // Artist recommedation type\n  w?: number; // Time\n}\n\nexport default class DiscoveryAPI extends BaseAPIWithImageSupport {\n\n  async getAvailableOptions(): Promise<DiscoverOptions> {\n    return this.cache.getOrSet(CacheDataType.Constants, 'discoverOptions', async () => {\n      const html = await this.fetch(URLS.SITE_URL);\n      return DiscoverOptionsParser.parseOptions(html);\n    });\n  }\n\n  async sanitizeDiscoverParams(params?: DiscoverParams): Promise<DiscoverParams> {\n    const options = await this.getAvailableOptions();\n\n    const _getOptionValue = <T>(optArr: NameValuePair<T>[], value?: T, defaultIndex = 0) => {\n      if (value !== undefined && optArr) {\n        const opt = optArr.find((o) => o.value == value);\n        if (opt) {\n          return opt.value;\n        }\n      }\n      if (optArr) {\n        return optArr[defaultIndex].value;\n      }\n\n      return undefined;\n\n    };\n\n    const sanitized: DiscoverParams = {\n      genre: _getOptionValue(options.genres, params?.genre),\n      sortBy: _getOptionValue(options.sortBys, params?.sortBy),\n      page: params?.page || 0\n    };\n\n    if (sanitized.sortBy !== 'rec' && sanitized.genre) {\n      // Following only available when sortBy is not 'rec' (artist-recommend)\n      const subgenreOptions = options.subgenres[sanitized.genre];\n      if (subgenreOptions) { // `false` if genre is 'all'\n        sanitized.subgenre = _getOptionValue(subgenreOptions, params?.subgenre);\n      }\n      // 'Time' option only available when there is effectively no subgenre (e.g. genre is 'all' or subgenre is 'all-metal')\n      const timeAllowed = sanitized.subgenre === undefined || sanitized.subgenre == subgenreOptions[0].value;\n      if (timeAllowed) {\n        sanitized.time = _getOptionValue(options.times, params?.time, 1);\n      }\n      sanitized.location = _getOptionValue(options.locations, params?.location);\n      sanitized.format = _getOptionValue(options.formats, params?.format);\n    }\n    else {\n      sanitized.artistRecommendationType = _getOptionValue(options.artistRecommendationTypes, params?.artistRecommendationType);\n    }\n\n    return sanitized;\n  }\n\n  async discover(params?: DiscoverParams): Promise<DiscoverResult> {\n    const imageConstants = await this.imageAPI.getConstants();\n    const opts = {\n      imageBaseUrl: imageConstants.baseUrl,\n      albumImageFormat: await this.imageAPI.getFormat(params?.albumImageFormat, 9),\n      artistImageFormat: await this.imageAPI.getFormat(params?.artistImageFormat, 21)\n    };\n\n    const sanitizedParams = await this.sanitizeDiscoverParams(params);\n    const resultParams = { ...sanitizedParams };\n    // Passing an 'all' type subgenre (e.g. 'all-metal') in the discover url\n    // Actually returns far fewer / zero results than without.\n    // The Bandcamp site also does not seem to include it in its discover requests...\n    if (sanitizedParams.time !== undefined) {\n      // If 'time' exists in sanitized params, then we have an 'all' type subgenre\n      // - refer to sanitizeDiscoverParams()\n      delete sanitizedParams.subgenre;\n    }\n\n    const payload = DiscoveryAPI.getDiscoverRequestPayload(sanitizedParams);\n    const json = await this.fetch(URLS.DISCOVER_URL, true, FetchMethod.GET, payload);\n    return DiscoverResultParser.parseDiscoverResult(json, opts, resultParams);\n  }\n\n  /**\n   * @internal\n   */\n  protected static getDiscoverRequestPayload(params: DiscoverParams): DiscoverRequestPayload {\n    const result: DiscoverRequestPayload = {\n      s: params.sortBy || 'top',\n      p: params.page || 0\n    };\n    if (params.genre) {\n      result.g = params.genre;\n\n      if (params.subgenre) {\n        result.t = params.subgenre;\n      }\n    }\n    if (params.location !== undefined) {\n      result.gn = params.location;\n    }\n    if (params.format) {\n      result.f = params.format;\n    }\n    if (result.s === 'rec' && params.artistRecommendationType) {\n      result.r = params.artistRecommendationType;\n    }\n    if (params.time !== undefined) {\n      result.w = params.time;\n    }\n\n    return result;\n  }\n}\n\nexport class LimiterDiscoveryAPI extends DiscoveryAPI {\n\n  #limiter: Limiter;\n\n  constructor(params: BaseAPIWithImageSupportParams & { limiter: Limiter }) {\n    super(params);\n    this.#limiter = params.limiter;\n  }\n\n  async getAvailableOptions(): Promise<DiscoverOptions> {\n    return this.#limiter.schedule(() => super.getAvailableOptions());\n  }\n\n  async sanitizeDiscoverParams(params: DiscoverParams): Promise<DiscoverParams> {\n    return this.#limiter.schedule(() => super.sanitizeDiscoverParams(params));\n  }\n\n  async discover(params: DiscoverParams): Promise<DiscoverResult> {\n    return this.#limiter.schedule(() => super.discover(params));\n  }\n}\n"]}