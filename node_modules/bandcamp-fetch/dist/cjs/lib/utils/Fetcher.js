"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Fetcher_cookie, _Fetcher_cache;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FetchError = exports.FetchMethod = void 0;
const url_1 = require("url");
const node_fetch_1 = __importStar(require("node-fetch"));
const Cache_js_1 = require("./Cache.js");
var FetchMethod;
(function (FetchMethod) {
    FetchMethod["GET"] = "GET";
    FetchMethod["POST"] = "POST";
    FetchMethod["HEAD"] = "HEAD";
})(FetchMethod = exports.FetchMethod || (exports.FetchMethod = {}));
class Fetcher {
    constructor(params) {
        _Fetcher_cookie.set(this, void 0);
        _Fetcher_cache.set(this, void 0);
        __classPrivateFieldSet(this, _Fetcher_cache, params.cache, "f");
        this.setCookie(params.cookie);
    }
    setCookie(value) {
        __classPrivateFieldSet(this, _Fetcher_cookie, value, "f");
        const valueChanged = ((__classPrivateFieldGet(this, _Fetcher_cookie, "f") || null) !== (value || null));
        if (valueChanged) {
            __classPrivateFieldGet(this, _Fetcher_cache, "f").clear();
        }
    }
    get cookie() {
        return __classPrivateFieldGet(this, _Fetcher_cookie, "f");
    }
    fetch(url, jsonResponse, method, payload) {
        if (jsonResponse === undefined) {
            jsonResponse = false;
        }
        return __classPrivateFieldGet(this, _Fetcher_cache, "f").getOrSet(Cache_js_1.CacheDataType.Page, getCacheKey(url, jsonResponse, payload), async () => {
            if (method === undefined) {
                method = FetchMethod.GET;
            }
            if (method === FetchMethod.HEAD) {
                const response = await (0, node_fetch_1.default)(url, { method: 'HEAD' });
                return {
                    ok: response.ok,
                    status: response.status
                };
            }
            let response;
            if (method === FetchMethod.GET) {
                const urlObj = new url_1.URL(url);
                if (payload) {
                    for (const [key, value] of Object.entries(payload)) {
                        urlObj.searchParams.set(key, value);
                    }
                }
                try {
                    const request = new node_fetch_1.Request(urlObj.toString());
                    if (__classPrivateFieldGet(this, _Fetcher_cookie, "f")) {
                        request.headers.set('Cookie', __classPrivateFieldGet(this, _Fetcher_cookie, "f"));
                    }
                    response = await (0, node_fetch_1.default)(request);
                }
                catch (error) {
                    throw new FetchError(error);
                }
            }
            else {
                const init = {
                    method: 'POST',
                    body: payload ? JSON.stringify(payload) : undefined
                };
                const request = new node_fetch_1.Request(url);
                request.headers.set('Content-Type', 'application/x-www-form-urlencoded');
                if (__classPrivateFieldGet(this, _Fetcher_cookie, "f")) {
                    request.headers.set('Cookie', __classPrivateFieldGet(this, _Fetcher_cookie, "f"));
                }
                try {
                    response = await (0, node_fetch_1.default)(request, init);
                }
                catch (error) {
                    throw new FetchError(error);
                }
            }
            if (response.status === 429) {
                throw new FetchError({
                    message: '429 Too Many Requests',
                    code: 429
                });
            }
            if (jsonResponse) {
                return response.json();
            }
            return response.text();
        });
    }
}
exports.default = Fetcher;
_Fetcher_cookie = new WeakMap(), _Fetcher_cache = new WeakMap();
function getCacheKey(url, jsonResponse, payload) {
    return url + (jsonResponse ? ':json' : ':html') +
        (payload ? `:${JSON.stringify(payload)}` : '');
}
class FetchError extends Error {
    constructor(payload) {
        super();
        if (payload?.message) {
            this.message = payload.message;
        }
        if (payload?.code) {
            this.code = payload.code;
        }
        if (payload?.stack) {
            this.stack = payload.stack;
        }
    }
}
exports.FetchError = FetchError;
//# sourceMappingURL=Fetcher.js.map