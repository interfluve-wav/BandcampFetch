import BaseAPIWithImageSupport, { BaseAPIWithImageSupportParams } from '../common/BaseAPIWithImageSupport.js';
import { ImageFormat } from '../types/Image.js';
import Tag, { AlbumHighlightsByTag, ReleasesByTag, TagList } from '../types/Tag.js';
import Limiter from '../utils/Limiter.js';
export interface TagAPIGetAlbumHighlightsParams {
    tagUrl: string;
    imageFormat?: string | number | ImageFormat;
}
export interface TagAPIGetReleasesParams {
    tagUrl: string;
    imageFormat?: string | number | ImageFormat;
    useHardcodedDefaultFilters?: boolean;
    filters?: Record<string, string | number | Array<string | number>>;
    page?: number;
}
export default class TagAPI extends BaseAPIWithImageSupport {
    list(): Promise<TagList>;
    getInfo(tagUrl: string): Promise<Tag>;
    getAlbumHighlights(params: TagAPIGetAlbumHighlightsParams): Promise<AlbumHighlightsByTag[]>;
    getReleasesAvailableFilters(tagUrl: string): Promise<ReleasesByTag.Filter[]>;
    getReleases(params: TagAPIGetReleasesParams): Promise<ReleasesByTag>;
    /**
     * @internal
     */
    protected getReleaseFilterValueNames(tagUrl: string): Promise<ReleasesByTag.FilterValueNames>;
}
export declare class LimiterTagAPI extends TagAPI {
    #private;
    constructor(params: BaseAPIWithImageSupportParams & {
        limiter: Limiter;
    });
    list(): Promise<TagList>;
    getInfo(tagUrl: string): Promise<Tag>;
    getAlbumHighlights(params: TagAPIGetAlbumHighlightsParams): Promise<AlbumHighlightsByTag[]>;
    getReleasesAvailableFilters(tagUrl: string): Promise<ReleasesByTag.Filter[]>;
    getReleases(params: TagAPIGetReleasesParams): Promise<ReleasesByTag>;
}
//# sourceMappingURL=TagAPI.d.ts.map